#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "privatemessage.h"
#include <QRegExp>
#include <QMessageBox>
#include <QListWidgetItem>
#include <QPixmap>
#include <QAbstractButton>

#include <chrono>
#include <thread>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    setCentralWidget(ui->mainFrame);
    connect(ui->leServer, SIGNAL(returnPressed()), this, SLOT(on_pbLogin_clicked()));
    connect(ui->leName, SIGNAL(returnPressed()), this, SLOT(on_pbLogin_clicked()));
    connect(ui->leMessage, SIGNAL(returnPressed()), this, SLOT(on_pbSend_clicked()));
    connect(ui->regButton,SIGNAL(clicked(bool)),this,SLOT(registration()));

    QRegExp regex("^[a-zA-Z]\\w+");
    ui->leName->setValidator(new QRegExpValidator(regex, this));
    ui->registrLabel->setValidator(new QRegExpValidator(regex, this));
    ui->privateMsg->setValidator(new QRegExpValidator(regex, this));
    socket = new QTcpSocket(this);
    connect(ui->pbLogin, SIGNAL(clicked(bool)), this, SLOT(onConnected()));
    connect(socket, SIGNAL(readyRead()), this, SLOT(onReadyRead()));
    connect(socket, SIGNAL(disconnected()), this, SLOT(onDisconnected()));
    connect(ui->privateButton,SIGNAL(clicked(bool)),ui->privatePage,SLOT(sendMsg()));

    QPixmap pic("C:/Users/Goro/Desktop/Chat-master/client/3019382.jpg");
    ui->luxoft->setPixmap(pic);

}
/****************************************************************************************/
MainWindow::~MainWindow() {
    delete ui;

}


/****************************************************************************************/
void MainWindow::on_pbLogin_clicked() {

    QString serverName = ui->leServer->text().trimmed();
    if (serverName.isEmpty()) {
        QMessageBox::information(NULL, "Warning",
                                 "Enter the server name or address.",
                                 QMessageBox::Ok);
        return;
    }


    QString userName = ui->leName->text().trimmed();
    if (userName.isEmpty()) {
        QMessageBox::information(NULL, "Warning",
                                 "Enter your nickname.",
                                 QMessageBox::Ok);
        return;
    }

    socket->connectToHost(serverName, PORT);
}
/****************************************************************************************/
void MainWindow::on_pbSend_clicked() {
    QString message = ui->leMessage->text().trimmed();
    if (message[0]=='/'){
        ui->teChat->append("<p color=\"green\">" + message + "</p>\n");
    }
    if (!message.isEmpty()) {
        socket->write(QString("/say:" + message + "\n").toUtf8());
        //ui->teChat->append(message);
        ui->leMessage->clear();
        ui->leMessage->setFocus();

    }


}
/****************************************************************************************/
void MainWindow::registration()
{
    QString plus("/register:");
    QString username = ui->registrLabel->text().trimmed();
    auto newvar=plus+username + "\n";
    socket->connectToHost(QString(ui->leServer->text().trimmed()), PORT);
    socket->write(newvar.toUtf8());
    qDebug()<<plus+username;
}

/****************************************************************************************/

void MainWindow::onReadyRead() {
    QRegExp usersRex("^/users:(.*)$");
    QRegExp systemRex("^/system:(.*)$");
    QRegExp messageRex("^(.*):(.*)$");
    QRegExp falseLogin("^/falseLogin:(.*)$");
    QRegExp privateMessage("^/private(.*):/(.*)$");//:

    while (socket->canReadLine()) {
        QString line = QString::fromUtf8(socket->readLine()).trimmed();

        if (usersRex.indexIn(line) != -1) {
                       QStringList users = usersRex.cap(1).split(",");
                        ui->lwUsers->clear();
                        foreach (QString user, users){

                            listButtons.push_back(createNewBu
                                                  tton(user));

                            listWidgets.push_back(new PrivateMessage(socket,user));

                                QListWidgetItem *item=new QListWidgetItem(ui->lwUsers);
                                ui->lwUsers->addItem(item);
                                ui->lwUsers->setItemWidget(item,listButtons[listButtons.count() - 1]);
                                connect(listButtons[listButtons.count() - 1], &QPushButton::clicked, this, &MainWindow::buttonClicked);

                        }
        }


        else if (systemRex.indexIn(line) != -1) {
            QString msg = systemRex.cap(1);
            ui->teChat->append("<p color=\"gray\">" + msg + "</p>\n");
        }
        else if (falseLogin.indexIn(line) != -1)
        {
            if(falseLogin.cap(1) == ui->leName->text())
            {
            QMessageBox::warning(this, "Warning",
                                 "Username is wrong! You should be registred first", QMessageBox::Ok);

            ui->stackedWidget->setCurrentWidget(ui->loginPage);


            }
        }
        else if (privateMessage.indexIn(line) != -1)
        {
            QString user = privateMessage.cap(1);
            QString message = privateMessage.cap(2);
            ui->teChat->append(message);//private chat

            //TODO: Get user name from message

            pMessage(user);
            ui->teChat->append("<p><b>" + user + "</b>: " + message + "</p>\n");

        }
        else if (messageRex.indexIn(line) != -1) {
            QString user = messageRex.cap(1);
            QString message = messageRex.cap(2);
               ui->teChat->append("<p><b>" + user + "</b>: " + message + "</p>\n");

        }

    }
}
/****************************************************************************************/
void MainWindow::onConnected() {
    ui->teChat->clear();

    ui->stackedWidget->setCurrentWidget(ui->chatPage);//otvarq noviq prozorets

    socket->write(QString("/login:" + ui->leName->text() + "\n").toUtf8());
    ui->leMessage->setFocus();

}
/****************************************************************************************/
void MainWindow::onDisconnected() {
    QMessageBox::warning(NULL, "Warning",
                         "You have been disconnected from the server", QMessageBox::Ok);
    ui->stackedWidget->setCurrentWidget(ui->loginPage);
}

/****************************************************************************************/
QPushButton *MainWindow::createNewButton(QString &user)
{
       QPushButton* button = new QPushButton(user,ui->lwUsers);//dll
       button->setObjectName(user);
       QPixmap pixmap("C:/Users/Goro/Desktop/server-client/Chat-master/Client/user");
       QIcon ButtonIcon(pixmap);
       button->setIcon(ButtonIcon);
       button->setMinimumHeight(30);

       return button;
}
/****************************************************************************************/
void MainWindow::buttonClicked()
{
        QObject *senderObj = sender();
        QString senderObjName = senderObj->objectName();


      PrivateMessage *p = nullptr;
        for(auto& e : listWidgets)
        {
            if(e->getUserName() == senderObjName)
            {
                p=e;
            }
        }
        p->show();

}

void MainWindow::pMessage(const QString& name)
{
    PrivateMessage *p = nullptr;
    for(auto& e : listWidgets)
    {
        if(e->getUserName() == name)
        {
            p=e;
        }
    }
    p->show();
}

/****************************************************************************************/
void MainWindow::messageApend(QString& message)
{
    PrivateMessage *p = nullptr;
    if(p->close())
    {
        p->show();
    }
    p->textEditor->append(message);

}
